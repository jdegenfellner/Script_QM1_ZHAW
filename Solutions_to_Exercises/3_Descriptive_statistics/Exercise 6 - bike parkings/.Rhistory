library(tidyverse)
library(ggpubr)
# Set parameters for the exercise
set.seed(1234)
test_rho_values <- c(0.2, 0.5, 0.8)
test_n_values <- c(50, 200, 1000)
# Create a data frame to store all points for plotting
all_data <- data.frame()
# Generate data for each combination of rho and n
for (r in test_rho_values) {
for (s in test_n_values) {
x <- rnorm(s)
y <- r * x + sqrt(1 - r^2) * rnorm(s)
# Add to data frame with labels for rho and n
temp_data <- data.frame(x = x, y = y, rho = as.factor(r), n = as.factor(s))
all_data <- rbind(all_data, temp_data)
}
}
# Plot using facet_grid with rho in rows and n in columns
ggplot(all_data, aes(x = x, y = y)) +
geom_point(alpha = 0.4, color = "blue") +
facet_grid(rho ~ n, labeller = label_both) +
labs(title = "Scatter plots of x and y for different values of rho and n",
x = "x", y = "y") +
theme_minimal()
par(mfrow = c(1, 1))
# Set parameters for the exercise
set.seed(1234)
n <- 20     # Sample size
rho <- 0.7      # True correlation
num_simulations <- 1000   # Number of simulations for histogram
# Function to generate correlated data and calculate correlation coefficient
generate_correlation <- function(n, rho) {
x <- rnorm(n)
y <- rho * x + sqrt(1 - rho^2) * rnorm(n)
return(cor(x, y))
}
# Simulate correlation coefficients over 1000 trials and plot histogram
correlations <- replicate(num_simulations, generate_correlation(n, rho))
# Plot the histogram of the correlation coefficients
hist(correlations, breaks = 30, col = "skyblue", border = "white",
main = paste("Histogram of Correlation Coefficients (rho =", rho, ")"),
xlab = "Correlation Coefficient", ylab = "Frequency")
# Display mean and standard deviation of correlations
cat("Mean of simulated correlations:", mean(correlations), "\n")
quantile(correlations, c(0.025, 0.975))
# n = 20 (MSc-thesis)
# 2.5%     97.5%
# 0.3999409 0.8821489
IQR(correlations) # 0.1524189
quantile(correlations, c(0.02, 0.98))
# n = 20 (MSc-thesis)
# 2.5%     97.5%
# 0.3999409 0.8821489
IQR(correlations) # 0.1524189
quantile(correlations, c(0.02, 0.98))
# n = 20 (MSc-thesis)
# 2%           98%
# 0.3657449 0.8872824
IQR(correlations) # 0.1524189
# Set parameters for the exercise
set.seed(1234)
n <- 20     # Sample size
rho <- 0.7      # True correlation
num_simulations <- 1000   # Number of simulations for histogram
# Function to generate correlated data and calculate correlation coefficient
generate_correlation <- function(n, rho) {
x <- rnorm(n)
y <- rho * x + sqrt(1 - rho^2) * rnorm(n)
return(cor(x, y))
}
# Simulate correlation coefficients over 1000 trials and plot histogram
correlations <- replicate(num_simulations, generate_correlation(n, rho))
# Plot the histogram of the correlation coefficients
hist(correlations, breaks = 30, col = "skyblue", border = "white",
main = paste("Histogram of Correlation Coefficients (rho =", rho, ")"),
xlab = "Correlation Coefficient", ylab = "Frequency")
# Display mean and standard deviation of correlations
cat("Mean of simulated correlations:", mean(correlations), "\n")
quantile(correlations, c(0.02, 0.98))
# n = 20 (MSc-thesis)
# 2%           98%
# 0.3657449 0.8872824
IQR(correlations) # 0.1524189
n <- 200     # Sample size
rho <- 0.7      # True correlation
num_simulations <- 1000   # Number of simulations for histogram
# Function to generate correlated data and calculate correlation coefficient
generate_correlation <- function(n, rho) {
x <- rnorm(n)
y <- rho * x + sqrt(1 - rho^2) * rnorm(n)
return(cor(x, y))
}
# Simulate correlation coefficients over 1000 trials and plot histogram
correlations <- replicate(num_simulations, generate_correlation(n, rho))
# Plot the histogram of the correlation coefficients
hist(correlations, breaks = 30, col = "skyblue", border = "white",
main = paste("Histogram of Correlation Coefficients (rho =", rho, ")"),
xlab = "Correlation Coefficient", ylab = "Frequency")
# Display mean and standard deviation of correlations
cat("Mean of simulated correlations:", mean(correlations), "\n")
quantile(correlations, c(0.02, 0.98))
# n = 200 (larger project)
#   2%             98%
# 0.6154081 0.7633769
IQR(correlations) # 0.04671208
# Set parameters for the exercise
set.seed(1234)
test_rho_values <- c(0.2, 0.5, 0.8)
test_n_values <- c(50, 200, 1000)
# Create a data frame to store all points for plotting
all_data <- data.frame()
# Set parameters for the exercise
set.seed(1234)
test_rho_values <- c(0.2, 0.5, 0.8)
test_n_values <- c(50, 200, 1000)
# Create a data frame to store all points for plotting
all_data <- data.frame()
# Generate data for each combination of rho and n
for (r in test_rho_values) {
for (s in test_n_values) {
x <- rnorm(s)
y <- r * x + sqrt(1 - r^2) * rnorm(s)
# Add to data frame with labels for rho and n
temp_data <- data.frame(x = x, y = y, rho = as.factor(r), n = as.factor(s))
all_data <- rbind(all_data, temp_data)
}
}
all_data
# Plot using facet_grid with rho in rows and n in columns
ggplot(all_data, aes(x = x, y = y)) +
geom_point(alpha = 0.4, color = "blue") +
facet_grid(rho ~ n, labeller = label_both) +
labs(title = "Scatter plots of x and y for different values of rho and n",
x = "x", y = "y") +
theme_minimal()
# Set parameters for the exercise
set.seed(1234)
n <- 20     # Sample size
rho <- 0.7      # True correlation
num_simulations <- 1000   # Number of simulations for histogram
# Function to generate correlated data and calculate correlation coefficient
generate_correlation <- function(n, rho) {
x <- rnorm(n)
y <- rho * x + sqrt(1 - rho^2) * rnorm(n)
return(cor(x, y))
}
# Simulate correlation coefficients over 1000 trials and plot histogram
correlations <- replicate(num_simulations, generate_correlation(n, rho))
correlations
# Plot the histogram of the correlation coefficients
hist(correlations, breaks = 30, col = "skyblue", border = "white",
main = paste("Histogram of Correlation Coefficients (rho =", rho, ")"),
xlab = "Correlation Coefficient", ylab = "Frequency")
# Display mean and standard deviation of correlations
cat("Mean of simulated correlations:", mean(correlations), "\n")
# n = 20 (MSc-thesis)
# 2%           98%
# 0.3657449 0.8872824
IQR(correlations) # 0.1524189
n <- 200     # Sample size
rho <- 0.7      # True correlation
num_simulations <- 1000   # Number of simulations for histogram
# Function to generate correlated data and calculate correlation coefficient
generate_correlation <- function(n, rho) {
x <- rnorm(n)
y <- rho * x + sqrt(1 - rho^2) * rnorm(n)
return(cor(x, y))
}
# Simulate correlation coefficients over 1000 trials and plot histogram
correlations <- replicate(num_simulations, generate_correlation(n, rho))
# Plot the histogram of the correlation coefficients
hist(correlations, breaks = 30, col = "skyblue", border = "white",
main = paste("Histogram of Correlation Coefficients (rho =", rho, ")"),
xlab = "Correlation Coefficient", ylab = "Frequency")
# Display mean and standard deviation of correlations
cat("Mean of simulated correlations:", mean(correlations), "\n")
quantile(correlations, c(0.02, 0.98))
library(pacman)
p_load(jsonlite, tidyverse, leaflet)
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# /Users/juergen/Downloads/bike_parking.json
bike <- fromJSON("bike_parking.json")
# Extract the "features" data frame
features <- bike$features
# Extract and flatten geometry (coordinates)
coordinates <- do.call(rbind, lapply(features$geometry$coordinates, as.numeric))
colnames(coordinates) <- c("longitude", "latitude")
bike_data <- cbind(coordinates, features$properties)
head(bike_data)
bike_cleaned <- bike_data %>%
dplyr::select(longitude, latitude, name, address_city, address_postalCode, capacity, properties_operator)
head(bike_cleaned)
# Create an interactive map
# Check the structure of capacity
str(bike_cleaned$capacity)
# Convert capacity to numeric
bike_cleaned$capacity <- as.numeric(bike_cleaned$capacity)
# Check for warnings
if (any(is.na(bike_cleaned$capacity))) {
warning("Some capacities could not be converted to numeric. Non-numeric values have been set to NA.")
}
# Retry the map creation
leaflet(bike_cleaned) %>%
addTiles() %>%  # Add OpenStreetMap tiles
addCircleMarkers(
~longitude, ~latitude,
popup = ~paste(
"<strong>Name:</strong>", name,
"<br><strong>City:</strong>", address_city,
"<br><strong>Capacity:</strong>", capacity,
"<br><strong>Operator:</strong>", properties_operator
),
radius = ~log(capacity + 1) * 2,  # Radius scaled by capacity
color = ~ifelse(properties_operator == "SBB", "blue", "red"),
fillOpacity = 0.7
) %>%
addLegend("bottomright", colors = c("blue", "red"),
labels = c("SBB", "Other Operators"),
title = "Operators")
head(bike_cleaned)
# 1) In what city is the bike parking with the highest capacity located?
bike_cleaned$capacity <- as.numeric(bike_cleaned$capacity)  # Ensure capacity is numeric
bike_cleaned %>% filter(capacity == max(capacity, na.rm = TRUE)) # Basel SBB
# Winterthur
bike_cleaned %>% filter(address_city == "Winterthur")  # Winterthur
# 2) Which cities are represented in the dataset?
unique(bike_cleaned$address_city)
# 3) How many bike parkings are operated by the SBB (Swiss Federal Railways)?
bike_cleaned %>%
filter(properties_operator == "SBB") %>%
count(properties_operator)
# Summarize total capacity by city for SBB-operated bike parkings
sbb_capacity_city <- bike_cleaned %>%
filter(properties_operator == "SBB") %>%
group_by(address_city) %>%
summarise(total_capacity = sum(capacity, na.rm = TRUE)) %>%
arrange(desc(total_capacity))  # Order by total capacity
# Create an ordered bar plot
ggplot(sbb_capacity_city, aes(x = reorder(address_city, -total_capacity), y = total_capacity)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Total Bike Parking Capacity by City (SBB)",
x = "City",
y = "Total Capacity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sbb_capacity_city %>%
ggplot(aes(x = reorder(address_city, -total_capacity), y = total_capacity)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Total Bike Parking Capacity by City (SBB)",
x = "City",
y = "Total Capacity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 5)])
sbb_capacity_city %>%
ggplot(aes(x = reorder(address_city, -total_capacity), y = total_capacity)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Total Bike Parking Capacity by City (SBB)",
x = "City",
y = "Total Capacity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 10)])
# Create an ordered bar plot
ggplot(sbb_capacity_city, aes(x = reorder(address_city, +total_capacity), y = total_capacity)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Total Bike Parking Capacity by City (SBB)",
x = "City",
y = "Total Capacity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create an ordered bar plot
ggplot(sbb_capacity_city, aes(x = reorder(address_city, -total_capacity), y = total_capacity)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Total Bike Parking Capacity by City (SBB)",
x = "City",
y = "Total Capacity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(bike_cleaned)
# 2) Which cities are represented in the dataset?
unique(bike_cleaned$address_city)
# 4) What is the average capacity of bike parkings in the dataset?
mean(bike_cleaned$capacity, na.rm = TRUE)
# Draw a histogram
ggplot(bike_cleaned, aes(x = capacity)) +
geom_histogram(binwidth = 10, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Bike Parking Capacity",
x = "Capacity",
y = "Frequency")
# Maybe let's zoom in on the smaller ones:
bike_cleaned %>% filter(capacity < 100) %>%
ggplot(aes(x = capacity)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Bike Parking Capacity (Capacity < 100)",
x = "Capacity",
y = "Frequency"
# Maybe let's zoom in on the smaller ones:
bike_cleaned %>% filter(capacity < 100) %>%
ggplot(aes(x = capacity)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Bike Parking Capacity (Capacity < 100)",
x = "Capacity",
y = "Frequency")
# Draw a histogram
ggplot(bike_cleaned, aes(x = capacity)) +
geom_histogram(binwidth = 10, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Bike Parking Capacity",
x = "Capacity",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5))
# Maybe let's zoom in on the smaller ones:
bike_cleaned %>% filter(capacity < 100) %>%
ggplot(aes(x = capacity)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Bike Parking Capacity (Capacity < 100)",
x = "Capacity",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5))
# Draw a boxplot
ggplot(bike_cleaned, aes(y = capacity)) +
geom_boxplot(fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Boxplot of Bike Parking Capacity",
y = "Capacity") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5))
# Maybe look at the smaller ones:
bike_cleaned %>% filter(capacity < 100) %>%
ggplot(aes(y = capacity)) +
geom_boxplot(fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Boxplot of Bike Parking Capacity (Capacity < 100)",
y = "Capacity") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5))
# 5) What are the dimensions of the dataset bike_cleaned?
dim(bike_cleaned)
library(pacman)
p_load(jsonlite, tidyverse, leaflet)
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# /Users/juergen/Downloads/bike_parking.json
bike <- fromJSON("bike_parking.json")
bike
# Check for warnings
if (any(is.na(bike_cleaned$capacity))) {
warning("Some capacities could not be converted to numeric. Non-numeric values have been set to NA.")
}
library(pacman)
p_load(jsonlite, tidyverse, leaflet)
# Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# /Users/juergen/Downloads/bike_parking.json
bike <- fromJSON("bike_parking.json")
bike
# Extract the "features" data frame
features <- bike$features
features$geometry$coordinates
# Extract and flatten geometry (coordinates)
coordinates <- do.call(rbind, lapply(features$geometry$coordinates, as.numeric))
colnames(coordinates) <- c("longitude", "latitude")
bike_data <- cbind(coordinates, features$properties)
head(bike_data)
bike_data
bike_cleaned <- bike_data %>%
dplyr::select(longitude, latitude, name, address_city,
address_postalCode, capacity, properties_operator)
head(bike_cleaned)
# Create an interactive map
# Check the structure of capacity
str(bike_cleaned$capacity)
str(bike_cleaned)
# Convert capacity to numeric
bike_cleaned$capacity <- as.numeric(bike_cleaned$capacity)
# Check for warnings
if (any(is.na(bike_cleaned$capacity))) {
warning("Some capacities could not be converted to numeric. Non-numeric values have been set to NA.")
}
# Retry the map creation
leaflet(bike_cleaned) %>%
addTiles() %>%  # Add OpenStreetMap tiles
addCircleMarkers(
~longitude, ~latitude,
popup = ~paste(
"<strong>Name:</strong>", name,
"<br><strong>City:</strong>", address_city,
"<br><strong>Capacity:</strong>", capacity,
"<br><strong>Operator:</strong>", properties_operator
),
radius = ~log(capacity + 1) * 2,  # Radius scaled by capacity
color = ~ifelse(properties_operator == "SBB", "blue", "red"),
fillOpacity = 0.7
) %>%
addLegend("bottomright", colors = c("blue", "red"),
labels = c("SBB", "Other Operators"),
title = "Operators")
# 1) In what city is the bike parking with the highest capacity located?
bike_cleaned$capacity <- as.numeric(bike_cleaned$capacity)  # Ensure capacity is numeric
bike_cleaned %>% filter(capacity == max(capacity, na.rm = TRUE)) # Basel SBB
# Winterthur
bike_cleaned %>% filter(address_city == "Winterthur")  # Winterthur
ike_cleaned$address_city
bike_cleaned$address_city
# 2) Which cities are represented in the dataset?
unique(bike_cleaned$address_city)
# 3) How many bike parkings are operated by the SBB (Swiss Federal Railways)?
bike_cleaned %>%
filter(properties_operator == "SBB") %>%
count(properties_operator)
# Summarize total capacity by city for SBB-operated bike parkings
sbb_capacity_city <- bike_cleaned %>%
filter(properties_operator == "SBB") %>%
group_by(address_city) %>%
summarise(total_capacity = sum(capacity, na.rm = TRUE)) %>%
arrange(desc(total_capacity))  # Order by total capacity
# Summarize total capacity by city for SBB-operated bike parkings
sbb_capacity_city <- bike_cleaned %>%
filter(properties_operator == "SBB") %>%
group_by(address_city) %>%
summarise(total_capacity = sum(capacity, na.rm = TRUE)) %>%
arrange(desc(total_capacity))  # Order by total capacity
# Create an ordered bar plot
ggplot(sbb_capacity_city, aes(x = reorder(address_city, -total_capacity), y = total_capacity)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Total Bike Parking Capacity by City (SBB)",
x = "City",
y = "Total Capacity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Thin out a little bit
sbb_capacity_city %>%
ggplot(aes(x = reorder(address_city, -total_capacity), y = total_capacity)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(title = "Total Bike Parking Capacity by City (SBB)",
x = "City",
y = "Total Capacity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 10)]) # thin out a little bit
# 4) What is the average capacity of bike parkings in the dataset?
mean(bike_cleaned$capacity, na.rm = TRUE)
# Draw a histogram
ggplot(bike_cleaned, aes(x = capacity)) +
geom_histogram(binwidth = 10, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Bike Parking Capacity",
x = "Capacity",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5))
# Maybe let's zoom in on the smaller ones:
bike_cleaned %>% filter(capacity < 100) %>%
ggplot(aes(x = capacity)) +
geom_histogram(binwidth = 5, fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Bike Parking Capacity (Capacity < 100)",
x = "Capacity",
y = "Frequency") +
theme(plot.title = element_text(hjust = 0.5))
# Draw a boxplot
ggplot(bike_cleaned, aes(y = capacity)) +
geom_boxplot(fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Boxplot of Bike Parking Capacity",
y = "Capacity") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5))
# Maybe look at the smaller ones:
bike_cleaned %>% filter(capacity < 100) %>%
ggplot(aes(y = capacity)) +
geom_boxplot(fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Boxplot of Bike Parking Capacity (Capacity < 100)",
y = "Capacity") +
coord_flip() +
theme(plot.title = element_text(hjust = 0.5))
# 5) What are the dimensions of the dataset bike_cleaned?
dim(bike_cleaned)
